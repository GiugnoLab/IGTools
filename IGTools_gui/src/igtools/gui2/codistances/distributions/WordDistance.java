/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.codistances.distributions;

import igtools.analyses.recurrences.distances.ProperMinimalRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.expcomp.KExpComp;
//import igtools.analyses.recurrences.carpena.Distribution;
import igtools.common.distributions.DistributionUtils;
import igtools.common.distributions.EstimatedDistribution;
import igtools.common.distributions.EstimatedDistribution.FExponentialBased;
import igtools.common.distributions.distance.KLDistance;
import igtools.common.distributions.measures.Measures;
import igtools.common.distributions.resample.DistributionResampler;
import igtools.common.distributions.resample.MeanToAvg;
import igtools.common.distributions.resample.WindowAvg;
import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.sequence.B3LLSequence;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import java.awt.Color;
import java.awt.Dimension;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BoxLayout;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class WordDistance extends javax.swing.JFrame {

    private WSSequence wsseq;
    private NELSA nelsa;
    private int pickedK = 0;
    
    private IELSAIterator wit = null;
    
    private int nofChartCols = 1;
    private int nofChartRows = 4;
    
    /**
     * Creates new form WordDistance
     */
    public WordDistance(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        
        initComponents();
        this.setTitle("Word distance: "+wsseq.getName());
        
        this.chartsPanel.setLayout(new BoxLayout(this.chartsPanel, BoxLayout.Y_AXIS));
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        kTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        wordTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        estimatorLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        kl1Label = new javax.swing.JLabel();
        kl2Label = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        showDRDD = new javax.swing.JCheckBox();
        showDResampled = new javax.swing.JCheckBox();
        showDEstimated = new javax.swing.JCheckBox();
        showDNormalized = new javax.swing.JCheckBox();
        showDRDD2E = new javax.swing.JCheckBox();
        showDE2RDD = new javax.swing.JCheckBox();
        showDRDD_E = new javax.swing.JCheckBox();
        etypeComboBox = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JSeparator();
        resampleComboBox = new javax.swing.JComboBox();
        jSeparator5 = new javax.swing.JSeparator();
        dist2ParentCheckBox = new javax.swing.JCheckBox();
        maxDistanceField = new javax.swing.JTextField();
        period3CheckBox = new javax.swing.JCheckBox();
        p3byexpCheckBox = new javax.swing.JCheckBox();
        parTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("k");

        kTextField.setText("1");

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Export");

        jButton4.setText("go");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("next");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("prev");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel2.setText("Estimator");

        estimatorLabel.setText("-");

        jLabel4.setText("KL(RDD||E)");

        jLabel5.setText("KL(E||RDD)");

        kl1Label.setText("-");

        kl2Label.setText("-");

        jLabel3.setText("Show distribution");

        showDRDD.setSelected(true);
        showDRDD.setText("RDD");

        showDResampled.setSelected(true);
        showDResampled.setText("Resampled");

        showDEstimated.setSelected(true);
        showDEstimated.setText("Estimated");

        showDNormalized.setSelected(true);
        showDNormalized.setText("Normalized");

        showDRDD2E.setSelected(true);
        showDRDD2E.setText("KL(RDD||E)");

        showDE2RDD.setSelected(true);
        showDE2RDD.setText("KL(E||RDD)");

        showDRDD_E.setSelected(true);
        showDRDD_E.setText("RDD - E");

        etypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Geometric", "Exp. Maximum Likelyhood", "Exp. Simple", "Exp. Standard", "Exp. One Par.", "Exp. Two Par.", "Exp. Multiple", "Exp. OneMinus" }));
        etypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etypeComboBoxActionPerformed(evt);
            }
        });

        resampleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MeanToAvg", "WindowAvg" }));

        dist2ParentCheckBox.setText("KL(RDD||P)");

        maxDistanceField.setText("1000");

        period3CheckBox.setText("3 period");

        p3byexpCheckBox.setText("3byexp");

        parTextField.setText("1.0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resampleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSeparator2)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButton4)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton2)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton5)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addComponent(wordTextField, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(estimatorLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(kl1Label))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(kl2Label))
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(showDRDD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showDNormalized))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(showDResampled)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showDEstimated))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(showDRDD2E)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showDE2RDD))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(showDRDD_E)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dist2ParentCheckBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maxDistanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(parTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(period3CheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(p3byexpCheckBox)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(etypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resampleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(estimatorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(kl1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(kl2Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showDRDD)
                    .addComponent(showDNormalized))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showDResampled)
                    .addComponent(showDEstimated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showDRDD2E)
                    .addComponent(showDE2RDD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showDRDD_E)
                    .addComponent(dist2ParentCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(period3CheckBox)
                    .addComponent(p3byexpCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDistanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        chartsPanel.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout chartsPanelLayout = new javax.swing.GroupLayout(chartsPanel);
        chartsPanel.setLayout(chartsPanelLayout);
        chartsPanelLayout.setHorizontalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 632, Short.MAX_VALUE)
        );
        chartsPanelLayout.setVerticalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );

        getContentPane().add(chartsPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            int k = Integer.parseInt(this.kTextField.getText());
            this.wit = this.nelsa.begin(k);
            next();
        }catch(Exception e){}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        go();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        prev();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        next();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        draw();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void etypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_etypeComboBoxActionPerformed

    
    
    
    private void next(){
        try{
            if(wit != null && wit.next()){
                B3Nucleotide[] kmer = wit.kmer();
                this.wordTextField.setText(B3Nucleotide.toString(kmer));
                draw();
            }
        }catch(Exception e){
            
        }
    }
    private void prev(){
        try{
            if(wit != null && wit.prev()){
                B3Nucleotide[] kmer = wit.kmer();
                this.wordTextField.setText(B3Nucleotide.toString(kmer));
                draw();
            }
        }catch(Exception e){
            
        }
    }
    private void go(){
        try{
            
            B3LLSequence kmer = new B3LLSequence(this.wordTextField.getText().trim());
            this.wit = nelsa.find(kmer);
            if(this.wit != null){
                draw();
            }
            
        }catch(Exception e){
            this.wit = null;
        }
    }
    
    private void clearChartPanel(){
        this.chartsPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.chartsPanel.invalidate();
        this.chartsPanel.repaint();
    }
    
    private void forceChartPanel(){
        this.chartsPanel.revalidate();
        this.chartsPanel.repaint();
    }
    
    private void draw(){
        if(wit != null){
            clearChartPanel();
            try{
                
                if(wit.multiplicity() > 1){
                    
                    
                		Map<Double,Double> it_distr = ProperMinimalRecurrenceDistancesExtractor.factory(false, true).recurrenceDistanceDistributionMap(wit);
                        System.out.println(KExpComp.distanceToExponential(wit, new KLDistance.MaxKLDistance(), 0.01));
                		//System.out.println(KExpComp.distanceToExponential(wit, new KLDistance.MaxKLDistance(), 0.0));
                        
                        
                        Double maxDist = 0.0;
                        try{
                        	maxDist =Double.parseDouble(this.maxDistanceField.getText());
                        }catch(Exception e){
                        	maxDist = Double.MAX_VALUE;
                        }
                        
                        if(this.showDRDD.isSelected()){
                            final XYSeries raw_series = new XYSeries("");
                            for(Map.Entry<Double,Double> entry : it_distr.entrySet()){
                            	if(entry.getKey() > maxDist)
                            		break;
                                raw_series.add(entry.getKey(), entry.getValue());
                            }
                            //this.chartsPanel.add(makeRawChart(raw_series, "raw", "distance", "nof"));
                            this.chartsPanel.add(makeRawChart(raw_series, "raw", null, null));
                        }
                        
                        
////                        DistributionUtils.normalize(it_distr);
////                        if(this.showDNormalized.isSelected()){
////                            final XYSeries norm_series = new XYSeries("");
////                            for(Map.Entry<Double,Double> entry : it_distr.entrySet()){
////                            	if(entry.getKey() > maxDist)
////                            		break;
////                                norm_series.add(entry.getKey(), entry.getValue());
////                            }
////                            this.chartsPanel.add(makeRawChart(norm_series, "normalized", null, null));
////                        }
//
//                        
//                        
                        double resampleP = 0.01;
                        double[][] aa = DistributionUtils.toArray(it_distr);
                        
                        
                        Measures.DMeasures mes = new Measures.DMeasures();
                        Measures.measure(aa, mes);
                        mes.print();
                       
                        
                        
                        //DistributionUtils.resample(aa, resampleP);
                        if(this.showDResampled.isSelected()){
                            String resamplerS = this.resampleComboBox.getSelectedItem().toString();
                            DistributionResampler resampler = null;
                            if(resamplerS.compareTo("MeanToAvg")==0){
                                resampler = new MeanToAvg();
                            }
                            else if (resamplerS.compareTo("WindowAvg")==0){
                                resampler = new WindowAvg();
                            }
                            
                            resampler.resample(aa);
                            //DistributionUtils.resample(aa, resampleP);
                            
                            final XYSeries resampled_series = new XYSeries("");
                            for(int i=0; i<aa.length; i++){
                            	if(aa[i][0] > maxDist)
                            		break;
                                resampled_series.add(aa[i][0], aa[i][1]);
                            }
                            this.chartsPanel.add(makeRawChart(resampled_series, "resampled", null, null));
                        }

                        System.out.println(this.etypeComboBox.getSelectedItem().toString());
                        String etype = this.etypeComboBox.getSelectedItem().toString();
                        EstimatedDistribution estimator = null;
                        if(etype.compareTo("Geometric")==0){
                            estimator = new EstimatedDistribution.GeometricBased();
                        }
                        else if(etype.compareTo("Exp. Maximum Likelyhood")==0){
                            estimator = new EstimatedDistribution.ExponentialBased();
                        }
                        else if(etype.compareTo("Exp. Simple")==0){
                            estimator = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)estimator).regType = FExponentialBased.TYPE.SIMPLE;
                        }
                        else if(etype.compareTo("Exp. Standard")==0){
                            estimator = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)estimator).regType = FExponentialBased.TYPE.STANDARD;
                        }
                        else if(etype.compareTo("Exp. One Par.")==0){
                            estimator = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)estimator).regType = FExponentialBased.TYPE.ONE_PARAMETER;
                        }
                        else if(etype.compareTo("Exp. Two Par.")==0){
                            estimator = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)estimator).regType = FExponentialBased.TYPE.TWO_PARAMETERS;
                        }
                        else if(etype.compareTo("Exp. Multiple")==0){
                            estimator = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)estimator).regType = FExponentialBased.TYPE.MULTIPLE;
                            ((FExponentialBased)estimator).nofExp = 2;
                        }
                        else if(etype.compareTo("Exp. OneMinus")==0){
                            estimator = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)estimator).regType = FExponentialBased.TYPE.ONE_MINUS;
                        }
                        
                        
                        Map<Double,Double> e_distr = new TreeMap<Double,Double>();
                        
                        try{
                            estimator.estimateDistrParameter(aa);
                            this.estimatorLabel.setText("Exponential");
                        }catch(Exception e){
                            estimator = new EstimatedDistribution.GeometricBased();
                            estimator.estimateDistrParameter(aa);
                            this.estimatorLabel.setText("Geometric");
                        }
                        
                        for(Map.Entry<Double, Double> en : it_distr.entrySet()){
                               e_distr.put(en.getKey(), estimator.getValue(en.getKey()));
                        }
                        DistributionUtils.normalize(e_distr);
                        
                      
                      
//                        double mean = 0.0;
//                        double sd = 0.0;
//                        double skew = 0.0;
//                        double kurt = 0.0;
//                        
//                        double mean_n = 0.0;
//                        double sd_n = 0.0;
//                        double skew_n = 0.0;
//                        double kurt_n = 0.0;
                        
//                        for(Map.Entry<Double, Double> entry : it_distr.entrySet()){
//                        	mean += entry.getValue();
//                        }
//                        mean /= it_distr.size();
//                        for(Map.Entry<Double, Double> entry : it_distr.entrySet()){
//                        	sd += (entry.getValue() - mean)*(entry.getValue()-mean);
//                        }
//                        sd = (Math.sqrt(sd / it_distr.size()));
                        
                        
                      DistributionUtils.normalize(it_distr);
                      Measures.measureRaw(it_distr, mes);
                      mes.print();
                      
//                      for(Map.Entry<Double, Double> entry : it_distr.entrySet()){
//                      	mean_n += entry.getValue();
//                      }
//                      mean_n /= it_distr.size();
//                      for(Map.Entry<Double, Double> entry : it_distr.entrySet()){
//                      	sd_n += (entry.getValue() - mean_n)*(entry.getValue()-mean_n);
//                      }
//                      sd_n = (Math.sqrt(sd_n / it_distr.size()));
//                      
//                      for(Map.Entry<Double, Double> entry : it_distr.entrySet()){
//                    	  skew_n += Math.pow( (entry.getValue() - mean_n)/sd_n , 3);
//                    	  kurt_n += Math.pow( (entry.getValue() -mean_n)/ sd_n , 4);
//                      }
//                      skew_n /= it_distr.size();
//                      kurt_n /= it_distr.size();
//                      
//                      
//                      System.out.println(mean+"\t"+sd+"\t"+(sd>mean));
//                      System.out.println(mean_n+"\t"+sd_n+"\t"+(sd_n>mean_n));
//                      System.out.println(skew_n+"\t"+kurt_n);
                      
                      XYSeries line_raw = null;
                      XYSeries line_est = null;
                      
                      if(this.showDNormalized.isSelected()){
                          final XYSeries norm_series = new XYSeries("norm");
                          for(Map.Entry<Double,Double> entry : it_distr.entrySet()){
                          	if(entry.getKey() > maxDist)
                          		break;
                              norm_series.add(entry.getKey(), entry.getValue());
                          }
                          line_raw = norm_series;
                          this.chartsPanel.add(makeRawChart(norm_series, "normalized", null, null));
                      }   

                        if(this.showDEstimated.isSelected()){
                            final XYSeries est_series = new XYSeries("est");
                            for(Map.Entry<Double,Double> entry : e_distr.entrySet()){
                            	if(entry.getKey() > maxDist)
                            		break;
                                est_series.add(entry.getKey(), entry.getValue());
                            }
                            line_est = est_series;
                            this.chartsPanel.add(makeRawChart(est_series, "estimated", null, null));
                        }
                        
                        
                        
                        if(line_raw != null && line_est != null){
                            final XYSeries line_f = new XYSeries("f");
                            Double epar = Double.parseDouble(this.parTextField.getText());
                            for(Map.Entry<Double,Double> entry : it_distr.entrySet()){
                          	if(entry.getKey() > maxDist)
                          		break;
                              line_f.add(entry.getKey(), (Double)(epar * Math.exp((-1.0)*(epar*entry.getKey()))) );
                          }
                            
                            
                            this.chartsPanel.add(makeRawChart(line_raw,line_est,line_f, "lines", null, null));
                        }
                        
                        
                        
                        if(this.showDRDD_E.isSelected()){
                            final XYSeries rediff_series = new XYSeries("");
                            Double v;
                            for(Map.Entry<Double,Double> entry : it_distr.entrySet()){
                            	if(entry.getKey() > maxDist)
                            		break;
                                v = entry.getValue() - (e_distr.get(entry.getKey()));
                                rediff_series.add(entry.getKey(), v);
                            }
                            this.chartsPanel.add(makeRawChart(rediff_series, "RDD - Exp", null, null));
                        }
                        
                        Map<Double,Double> dist1 = new TreeMap<Double,Double>();
                        
                        double kl1 = KLDistance.pDistances(it_distr, e_distr, dist1);
                        if(this.showDRDD2E.isSelected()){
                            final XYSeries d1_series = new XYSeries("");
                            for(Map.Entry<Double,Double> entry : dist1.entrySet()){
                            	if(entry.getKey() > maxDist)
                            		break;
                                d1_series.add(entry.getKey(), entry.getValue());
                            }
                            this.chartsPanel.add(makeRawChart(d1_series, "RDD2Exp", null, null));
                        }
                        this.kl1Label.setText(""+kl1);
                        
                        
                        Map<Double,Double> dist2 = new TreeMap<Double,Double>();
                        double kl2 = KLDistance.pDistances(e_distr, it_distr, dist2);
                        if(this.showDE2RDD.isSelected()){
                            final XYSeries d2_series = new XYSeries("");
                            for(Map.Entry<Double,Double> entry : dist2.entrySet()){
                            	if(entry.getKey() > maxDist)
                            		break;
                                d2_series.add(entry.getKey(), entry.getValue());
                            }
                            this.chartsPanel.add(makeRawChart(d2_series, "Exp2RDD", null, null));
                        }
                        this.kl2Label.setText(""+kl2);

//                        
//                        if(this.dist2ParentCheckBox.isSelected() && wit.k()>1){
//                            B3Nucleotide[] kk = wit.kmer();
//                            B3Nucleotide[] pk = new B3Nucleotide[kk.length-1];
//                            for(int i=0; i<pk.length; i++) pk[i] = kk[i];
//                            System.out.println(B3Nucleotide.toString(pk));
//                            IELSAIterator pit = nelsa.find(pk);
//                            Map<Double,Double> p_distr = ProperMinimalRecurrenceDistancesExtractor.factory(false, true).recurrenceDistanceDistributionMap(pit);
//                            DistributionUtils.normalize(p_distr);
//                            Map<Double,Double> distp = new TreeMap<Double,Double>();
//                            double klp = KLDistance.pDistances(it_distr, p_distr, distp);
//                            System.out.println("distance to parent " + klp);
//                            final XYSeries dp_series = new XYSeries("");
//                            for(Map.Entry<Double,Double> entry : distp.entrySet()){
//                                dp_series.add(entry.getKey(), entry.getValue());
//                            }
//                            this.chartsPanel.add(makeRawChart(dp_series, "RDD2P", null, null));
//                        }
                        
                        
                        
                        if(this.period3CheckBox.isSelected()){
                            Map<Double,Double> it_distr_t = ProperMinimalRecurrenceDistancesExtractor.factory(false, true).recurrenceDistanceDistributionMap(wit);
				
				Map<Double,Double> it_12 = new TreeMap<Double,Double>();
				Map<Double,Double> it_3 = new TreeMap<Double,Double>();
				
                                Double p1_12 = 0.0;
                                Double p1_3 = 0.0;
                                
				for(Map.Entry<Double, Double> entry : it_distr_t.entrySet()){
					if(entry.getKey() % 3 == 0){
						it_3.put(entry.getKey(), entry.getValue());
						it_12.put(entry.getKey(), p1_12);
                                                p1_3 = entry.getValue();
					}
					else{
						it_12.put(entry.getKey(), entry.getValue());
						it_3.put(entry.getKey(), p1_3);
                                                p1_12 = entry.getValue();
					}
				}
				
				EstimatedDistribution ed_12 = KExpComp.getExponentialEstimator(it_12, resampleP);
				EstimatedDistribution ed_3 = KExpComp.getExponentialEstimator(it_3, resampleP);
                                
                                
                                final XYSeries series1 = new XYSeries("raw");
                                final XYSeries series2 = new XYSeries("12");
                                final XYSeries series3 = new XYSeries("3");
                                
                                double gap = 0.0;
                                
                                for(Map.Entry<Double, Double> entry : it_distr_t.entrySet()){
                                    //it_12.put(entry.getKey(), ed_12.getValue(entry.getKey()));
                                    //it_3.put(entry.getKey(), ed_3.getValue(entry.getKey()));
                                    series1.add(entry.getKey(), entry.getValue());
                                    series2.add(entry.getKey(), ed_12.getValue(entry.getKey()));
                                    series3.add(entry.getKey(), ed_3.getValue(entry.getKey()));
                                    
                                    /*if(entry.getKey() % 3 == 0){
                                        series3.add(entry.getKey(), entry.getValue());
                                    }
                                    else{
                                        series2.add(entry.getKey(), entry.getValue());
                                    }*/
                                    
                                    gap +=  ed_3.getValue(entry.getKey()) - ed_12.getValue(entry.getKey());
                                }
                                
                                System.out.println(gap);
                                
                                
                                this.chartsPanel.add(makeRawChart(series1,series2,series3, "3-period", null, null));
                        }
                        
                        if(this.p3byexpCheckBox.isSelected()){
                            Map<Double,Double> it_distr_t = ProperMinimalRecurrenceDistancesExtractor.factory(false, true).recurrenceDistanceDistributionMap(wit);
                            
                            Map<Double,Double> it_12 = new TreeMap<Double,Double>();
                            Double pp = 0.0;
                            for(Map.Entry<Double, Double> entry : it_distr_t.entrySet()){
                                if(entry.getKey()%3 == pp){
                                    it_12.put(entry.getKey(),0.0);
                                }
                                else{
                                    it_12.put(entry.getKey(),entry.getValue());
                                    pp = entry.getValue();
                                }
                            }
                            //EstimatedDistribution ed = KExpComp.getExponentialEstimator(it_distr_t, resampleP);
                            //EstimatedDistribution ed = KExpComp.getExponentialEstimator(it_12, resampleP);
                            
                             EstimatedDistribution ed = new EstimatedDistribution.FExponentialBased();
                            ((FExponentialBased)ed).regType = FExponentialBased.TYPE.SIMPLE;
                            ed.estimateDistrParameter(aa);
                            
                            Map<Double,Double> it_distr_ed = new TreeMap<Double,Double>();
                            for(Map.Entry<Double, Double> entry : it_distr_t.entrySet()){
                                it_distr_ed.put(entry.getKey(), ed.getValue(entry.getKey()));   
                            }
                            DistributionUtils.normalize(it_distr_t);
                            DistributionUtils.normalize(it_distr_ed);
                            
                            final XYSeries diffs = new XYSeries("diffs");
                            final XYSeries raw = new XYSeries("raw");
                            final XYSeries est = new XYSeries("est");
                            
                            double p_gap = 0.0;
                            double n_gap = 0.0;
                            Double gap=0.0;
                            
                            for(Map.Entry<Double, Double> entry : it_distr_t.entrySet()){
                                raw.add(entry.getKey(), entry.getValue());
                                est.add(entry.getKey(), it_distr_ed.get(entry.getKey()));
                                
                                gap = entry.getValue() - it_distr_ed.get(entry.getKey());
                                diffs.add(entry.getKey(), gap);
                                
                                if(gap < 0 ){
                                    n_gap += gap;
                                }
                                else{
                                    p_gap += gap;
                                }
                            }
                            
                            System.out.println(n_gap +" "+ p_gap +" "+ (p_gap + n_gap)+" "+ (p_gap + ((-1)*n_gap)));
                            
                             this.chartsPanel.add(makeRawChart(diffs, "diffs", null, null));
                            final XYSeries series3 = new XYSeries("fake");
                            this.chartsPanel.add(makeRawChart(raw,est,series3, "3-period", null, null));
                        }
                }

            }catch(Exception e){
                e.printStackTrace(System.err);
                System.err.println(e);
            }
            forceChartPanel();
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    private ChartPanel makeRawChart(final XYSeries series, final String title, final String xLabel, final String yLabel){
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        title, 
                                        xLabel, 
                                        false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(chartsPanel.getWidth() / nofChartCols,  chartsPanel.getHeight() / nofChartRows);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        chart.setBackgroundPaint(Color.white);
        chartPanel.setMouseWheelEnabled(true);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        plot.getDomainAxis().setAutoTickUnitSelection(true);
        
        return chartPanel;
    }
    
    
    private ChartPanel makeRawChart(final XYSeries series1, final XYSeries series2, final XYSeries series3, final String title, final String xLabel, final String yLabel){
        //final XYSeriesCollection dataset = new XYSeriesCollection(series1);
        final XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series1);
        dataset.addSeries(series2);
        dataset.addSeries(series3);
        final JFreeChart chart = ChartFactory.createXYLineChart(
                                        title, 
                                        xLabel, 
                                        //false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        true, 
                                        true, 
                                        false);
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(chartsPanel.getWidth() / nofChartCols,  chartsPanel.getHeight() / nofChartRows);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        chart.setBackgroundPaint(Color.white);
        chartPanel.setMouseWheelEnabled(true);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        //((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        //plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        //plot.getDomainAxis().setAutoTickUnitSelection(true);
        
        return chartPanel;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JPanel chartsPanel = new javax.swing.JPanel();
    private javax.swing.JCheckBox dist2ParentCheckBox;
    private javax.swing.JLabel estimatorLabel;
    private javax.swing.JComboBox etypeComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField kTextField;
    private javax.swing.JLabel kl1Label;
    private javax.swing.JLabel kl2Label;
    private javax.swing.JTextField maxDistanceField;
    private javax.swing.JCheckBox p3byexpCheckBox;
    private javax.swing.JTextField parTextField;
    private javax.swing.JCheckBox period3CheckBox;
    private javax.swing.JComboBox resampleComboBox;
    private javax.swing.JCheckBox showDE2RDD;
    private javax.swing.JCheckBox showDEstimated;
    private javax.swing.JCheckBox showDNormalized;
    private javax.swing.JCheckBox showDRDD;
    private javax.swing.JCheckBox showDRDD2E;
    private javax.swing.JCheckBox showDRDD_E;
    private javax.swing.JCheckBox showDResampled;
    private javax.swing.JTextField wordTextField;
    // End of variables declaration//GEN-END:variables
}
